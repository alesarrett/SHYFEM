#!/bin/bash
#
# shell for gnuplot
#
#########################################################

version=1.70

# 1.71	05.06.2015	new -dash for different dash styles
# 1.70	27.05.2015	new -ty2 -ry2 -y2 for second y-axis
# 1.61	27.04.2015	-sy now working, logarithmic axis introduced
# 1.60	23.01.2014	new options -color -width -showcolor, restructuring
# 1.51	23.01.2012	new option -logo
# 1.50	05.05.2011	new option -sy (not yet working)
# 1.46	23.10.2009	new option -verbose
# 1.45	24.08.2009	new option -bw (is already default)
# 1.44	20.08.2009	better handling of -png option
# 1.43	04.02.2002	accepts -o option
# 1.42	30.01.2002	accepts -xtics option
# 1.41	30.11.2001	accepts -style option special -> small red box
# 1.40	29.11.2001	accepts -style option
# 1.31			accepts -grid
# 1.30			accepts -ppp and -sx
# 1.23			accepts -u all
# 1.22			remove parts of legend (option -l)
# 1.21			better conti line treatment, signal error in option
# 1.20			specify x/y range
# 1.10			using different columns
# 1.00			original version

######################################################### defaults

FEMDIR=${SHYFEMDIR:=$HOME/shyfem}

fembin=$FEMDIR/fembin

title="Timeseries"
type="monochrome"
orientation="landscape"
terminal="postscript"
using="using 1:2"
grid="NO"
xlog="NO"
ylog="NO"
verbose="NO"
nolegend="xyz*^+="	# something very unlikely
ppp="0"			# plots per page
xfact="1"		# scaling of x axis
yfact="1"		# scaling of y axis
style=""
color=""
width=""
xtics=""
outfile=""
ghost='ghostview -dsc -scale -2'

logo="0"
logo_file=$fembin/logo/logo.eps			#file to be included as logo
logo_where="0.92 0.92 0 0.99"			#position of included file

######################################################### programs

gnuplot="/usr/bin/gnuplot"
psgnu="$fembin/psgnu"
extractcol="$fembin/extractcol"
scalecol="$fembin/scalecol"
range="$fembin/range"
gpsmerge="$fembin/gpsmerge"

######################################################### copyright

copy1="File automatically generated by gp"
copy2="gp - shell for gnuplot                 Version $version"
copy3="Copyright (c) 1998-2014 Georg Umgiesser - ISMAR-CNR"
copy4="e-mail: georg@isdgm.ve.cnr.it"

######################################################### help - usage

Copy()
{
  echo "$copy2"
  echo "$copy3"
}

Usage()
{
  echo "Usage: gp [ -h | -help ] [ options ] file[s]"
}

FullUsage()
{
  echo ""

  Copy
  echo ""
  Usage

  echo ""
  echo "Available options:"
  echo "  -h|-help         this help"
  echo "  -showcolor       shows available color names"
  echo "  -c|-bw           color|black&white output (-bw is default)"
  echo "  -o outfile       plot to outfile (show with ghostview if -)"
  echo "  -png             output in PNG format"
  echo "  -p               portrait mode"
  echo "  -ppp n           put n plots per page (default: all plots)"
  echo "  -grid            plots grid underneath plot"
  echo "  -xlog|-ylog      use logarithmic scaling for x/y axis"
  echo "  -style style     sets line style for following files"
  echo "  -color color     sets line color for following files"
  echo "  -width width     sets line width (integer) for following files"
  echo "  -dash dash       sets dash style (integer) for following files"
  echo "  -xtics xtics     sets tics style for x-axis"
  echo "  -u  x:y          using columns x and y for x/y values (Default 1:2)"
  echo "  -u  all          plot all columns (x:all also possible)"
  echo "  -t  title        give title of plot"
  echo "  -tx xlabel       give x-label of plot"
  echo "  -ty ylabel       give y-label of plot"
  echo "  -rx xmin:xmax    give x-range of plot"
  echo "  -ry ymin:ymax    give y-range of plot"
  echo "  -ty2 ylabel      give y-label of plot for second y-axis"
  echo "  -ry2 ymin:ymax   give y-range of plot for second y-axis"
  echo "  -y1              use first y-axis for following files (default)"
  echo "  -y2              use second y-axis for following files"
  echo "  -sx xfact        scale x-coordinate with xfact"
  echo "  -sy yfact        scale y-coordinate with yfact"
  echo "  -l  string       string that is removed from legend if found"
  echo "  -logo            insert logo"
  #echo "  -logo_where pos  insert logo at position pos (see gpsinsert)"
  echo "  -verbose         writes some diagnostic messages"
  echo ""
  echo "Possible style options are:"
  echo "   lines, points, linespoints, impulses, dots"
  echo "   steps, fsteps, histeps"
  echo "   errorbars, xerrorbars, yerrorbars"
  echo "Possible color options are:"
  echo "   red, blue, green, etc.."
  echo "   to see all color names run gp with -showcolor"
  echo "Possible dash styles are: 1,2,3,... (1 solid line)"
  echo "Possible xtics options are:"
  echo "   xdtics, xmtics, mesi, months or (custom)"
  echo "Column 0 indicates automatically generated index"
  echo "-u 0:all uses generated index on all data columns"
  echo ""
}

ErrorOption()
{
  echo "No such option : $1"
}

ErrorOptionPosition()
{
  echo "No such option or in wrong place: $1"
}

MakeLegend()	#substitutes _ with blank and removes string in $nolegend
{
  echo $1 | sed -e "s/$nolegend//g" | sed -e 's/_/ /g' | sed -e 's/ *$//'
}

ShowColor()
{
  $gnuplot <<EOI
show palette colornames
quit
EOI
}

#-------------------------------------------------------------------

GiveNames()
{
  # checks first line of files and uses it as filename if starting with letter
  # else just appends old file names to list of files to be processed

  newfiles=""

  for file in $files
  do
    line=`head -1 $file | perl -p -e 's/\s*\S+\s+//'`
    newfile=`echo $line | grep '^[a-zA-Z]'`
    if [ -n "$newfile" ]; then
      #echo "filename is $newfile"
      newfiles="$newfiles $newfile"
      mv -f $file $newfile
    else
      newfiles="$newfiles $file"
    fi
  done

  files=$newfiles
}

HandleFiles()
{
  # inserts file into list with actual styles

  n=${#afiles[@]}	#number of array elements (indexing starts from 0)

  for file
  do
    afiles[$n]=$file
    astyles[$n]=$style
    acolors[$n]=$color
    awidths[$n]=$width
    aaxes[$n]=$axes
    adash[$n]=$dash
    ((n++))
  done
}

InsertFiles()
{
  local s=${astyles[0]}
  local c=${acolors[0]}
  local w=${awidths[0]}
  local x=${aaxes[0]}
  local d=${adash[0]}

  local n=0

  for file in $files
  do
    echo "inserting $file"
    afiles[$n]=$file
    astyles[$n]=$s
    acolors[$n]=$c
    awidths[$n]=$w
    aaxes[$n]=$x
    adash[$n]=$d
    ((n++))
  done
}

ShowFiles()
{
  n=${#afiles[@]}
  m=0
  mm=1

  echo "-------- info on files and styles --------------"
  while [ $m -lt $n ]
  do
     f=${afiles[$m]}
     s=${astyles[$m]}
     c=${acolors[$m]}
     w=${awidths[$m]}
     x=${aaxes[$m]}
     d=${adash[$m]}
     echo "$mm/$n $f $s $c $w $x $d"
     ((m++))
     ((mm++))
  done
  echo "------------------------------------------------"
}

#-------------------------------------------------------------------

Plotting()
{
  echo 'plot \' >> gnu.tmp

   eol=' \'	#end of line
  cont='  '	#continuation of line

  while [ $# -gt 0 ]
  do

    file=${afiles[$1]}
    style=${astyles[$1]}
    color=${acolors[$1]}
    width=${awidths[$1]}
    axes=${aaxes[$1]}
    dash=${adash[$1]}

    with=""
    lc=""
    lw=""
    lt=""
    use=$using
    if [ -n "$style" ]; then
      with="w $style"
      if [ $style = "special" ]; then
        with="w points pt 4"
        special="1"
      elif [ $style = "special2" ]; then
        with="w xerrorbars"
        use="using 1:2:3"
        special="2"
      elif [ $style = "xerrorbars" ]; then
        use="using 1:2:3"
      elif [ $style = "yerrorbars" ]; then
        use="using 1:2:3"
      elif [ $style = "errorbars" ]; then
        use="using 1:2:3"
      fi
    fi
    if [ -n "$axes" ]; then
      axes="axes $axes"
    fi
    if [ -n "$dash" ]; then
      lt="lt $dash"
    fi
    if [ -n "$color" ]; then
      lc="lc rgb '$color'"
    fi
    if [ -n "$width" ]; then
      lw="lw $width"
    fi

    [ -z "$2" ] && eol=' '

    legend=`MakeLegend $file`
    line="     \"$file\" $use $axes title \"$legend\" $with $lt $lc $lw"
    echo "$cont $line $eol" >> gnu.tmp
    cont=', '

    shift

  done

  echo "" >> gnu.tmp
  echo "quit" >>  gnu.tmp
}

PlotFiles()
{
  cp gnu.tmp gnuhead.tmp
  rm -f out.[1-9]*.ps

  nfiles=${#afiles[@]}

  [ $ppp -eq 0 ] && ppp=$nfiles		#all plots on one page

  page=0
  index=0

  while [ $index -lt $nfiles ]
  do
    ((page++))
    fnames=""
    indices=""
    special="NO"

    for f in `$range $ppp`
    do
      file=${afiles[$index]}
      fnames="$fnames $file"
      indices="$indices $index"
      ((index++))
      shift
    done

    if [ $verbose = "YES" ]; then
      echo "page: $page  files: $fnames  indices: $indices"
    fi
    cp gnuhead.tmp gnu.tmp

    Plotting $indices
    $gnuplot gnu.tmp
    [ $orientation = "landscape" ] && $psgnu out.ps
    [ $special != "NO" ] && AdjustSpecial $special

    [ -f out.ps ] && mv out.ps out.$page.ps
  done
  [ -f out.1.ps ] && $gpsmerge out.[1-9]*.ps > out.ps
}

#-------------------------------------------------------------------

mesi='\
         ""  0 , "Gen"  0.5 , ""  1 , "Feb"  1.5 , \
         ""  2 , "Mar"  2.5 , ""  3 , "Apr"  3.5 , \
         ""  4 , "Mag"  4.5 , ""  5 , "Giu"  5.5 , \
         ""  6 , "Lug"  6.5 , ""  7 , "Ago"  7.5 , \
         ""  8 , "Set"  8.5 , ""  9 , "Ott"  9.5 , \
         "" 10 , "Nov" 10.5 , "" 11 , "Dic" 11.5 , \
         "" 12'

months='\
         ""  0 , "Jan"  0.5 , ""  1 , "Feb"  1.5 , \
         ""  2 , "Mar"  2.5 , ""  3 , "Apr"  3.5 , \
         ""  4 , "May"  4.5 , ""  5 , "Jun"  5.5 , \
         ""  6 , "Jul"  6.5 , ""  7 , "Aug"  7.5 , \
         ""  8 , "Sep"  8.5 , ""  9 , "Oct"  9.5 , \
         "" 10 , "Nov" 10.5 , "" 11 , "Dec" 11.5 , \
         "" 12'

#-------------------------------------------------------------------

AdjustSpecial()
{
  #for some reason special must always be last option -> color problems
  laststyle=`grep '^LT' out.ps | tail -1`
  echo "adjusting special style: $laststyle"
  gpgnustyle.pl $1 out.ps > out.tmp
  mv out.tmp out.ps
}

#-------------------------------------------------------------------
# start routine
#-------------------------------------------------------------------

declare -a afiles		#must be global
declare -a astyles
declare -a acolors
declare -a awidths
declare -a aaxes
declare -a adash

######################################################### read options

while [ -n "$1" ]
do
   case $1 in
	-c)		type="color";;
	-bw)		type="monochrome";;
	-o)		outfile=$2; shift;;
	-p)		orientation="portrait";;
	-ppp)		ppp=$2; shift;;
	-grid)		grid="YES";;
	-xtics)		xtics=$2; shift;;
	-style)		style=$2; shift;;
	-color)		color=$2; shift;;
	-width)		width=$2; shift;;
	-dash)		dash=$2; shift;;
	-xlog)		xlog="YES";;
	-ylog)		ylog="YES";;
	-png)		terminal="png";;
	-u)		using="using $2"; shift;;
	-t)		title=$2; shift;;
	-tx)		xlabel=$2; shift;;
	-ty)		ylabel=$2; shift;;
	-rx)		xrange=$2; shift;;
	-ry)		yrange=$2; shift;;
	-ty2)		y2label=$2; shift;;
	-ry2)		y2range=$2; shift;;
	-y1)		axes="x1y1";;
	-y2)		axes="x1y2";;
	-sx)		xfact=$2; shift;;
	-sy)		yfact=$2; shift;;
	-l)		nolegend=$2; shift;;
	-logo)		logo=1;;
	-logo_where)	logo=1; logo_where=$2; shift;;
	-verbose)	verbose="YES";;
	-showcolor)	ShowColor; exit 0;;
	-h|-help)	FullUsage; exit 0;;
	-*)		ErrorOption $1; exit 1;;
	*)		HandleFiles $1;;
   esac
   shift
done

######################################################### no file -> write help
 
n=${#afiles[@]}
if [ $n -le 0 ]; then
  Usage
  exit 1;
fi

######################################################### write header

if [ $terminal = "png" ]; then
  orientation="small"
  orientation="large"
  output="out.png"
  type="size 1280,960"
  type="size 800,600"
else
  output="out.ps"
fi

cat > gnu.tmp <<EOI

# $copy1
# $copy2
# $copy3
# $copy4

set terminal $terminal $orientation $type
set output "$output"

set style data lines
#set data style lines		#old call
#set data style linespoints
set title "$title"

EOI

######################################################### write defaults

if [ -n "$xlabel" ]; then
  echo "set xlabel \"$xlabel\"" >> gnu.tmp
fi
if [ -n "$ylabel" ]; then
  echo "set ylabel \"$ylabel\"" >> gnu.tmp
fi

if [ -n "$xrange" ]; then
  echo "set xrange [$xrange]" >> gnu.tmp
fi
if [ -n "$yrange" ]; then
  echo "set yrange [$yrange]" >> gnu.tmp
fi

if [ $orientation = "portrait" ]; then
  echo "set size 0.7,0.7" >> gnu.tmp
fi

if [ $grid = "YES" ]; then
  echo "set grid" >> gnu.tmp
fi

if [ $xlog = "YES" ]; then
  echo "set logscale x" >> gnu.tmp
fi

if [ $ylog = "YES" ]; then
  echo "set logscale y" >> gnu.tmp
fi

if [ -n "$xtics" ]; then
  if [ "$xtics" = "xdtics" ]; then
    echo "set xdtics" >> gnu.tmp
  elif [ "$xtics" = "xmtics" ]; then
    echo "set xmtics" >> gnu.tmp
  elif [ "$xtics" = "mesi" ]; then
    echo "set xtics ($mesi)" >> gnu.tmp
  elif [ "$xtics" = "months" ]; then
    echo "set xtics ($months)" >> gnu.tmp
  else
    echo "set xtics $xtics" >> gnu.tmp
  fi
fi

if [ -n "$y2label" -o -n "$y2range" ]; then		#second y-axis
  echo "set ytics nomirror" >> gnu.tmp
  echo "set y2tics" >> gnu.tmp
  if [ -n "$y2label" ]; then
    echo "set y2label \"$y2label\"" >> gnu.tmp
  fi
  if [ -n "$y2range" ]; then
    echo "set y2range [$y2range]" >> gnu.tmp
  fi
fi

echo "" >> gnu.tmp

######################################################### files to plot

#MakeFiles $@

files=${afiles[@]}

######################################################### adjust using command

aux=`echo $using | sed -e 's/ //g' | sed -e 's/using//'`
if [[ $aux =~ all ]]; then
  xcol=`echo $aux | sed -e 's/://g' | sed -e 's/all//'`
  [ -z "$xcol" ] && xcol=1
  allcol="YES"
else
  allcol="NO"
fi

#echo "allcol=$allcol  xcol=$xcol"
#exit 0

if [ $allcol = "YES" ]; then
  using="using $xcol:2"
  nfiles=${#afiles[@]}
  if [ $nfiles -gt 1 ]; then
    echo "-u all only with one file"
    exit 1
  fi
  rm -f column.*
  $extractcol -f column -x $xcol $files
  files=`ls column.*[0-9]`
  GiveNames
  #SetFilesAndAttributes $files
  deletefiles=$files
  InsertFiles
fi

######################################################### scale plot

if [ $xfact != "1" -o $yfact != "1" ]; then
  newfiles=""
  m=0
  while [ $m -lt ${#afiles[@]} ]
  do
    file=${afiles[$m]}
    newfile=${file}_
    $scalecol -s $xfact $file > tmp.tmp
    $scalecol -s $yfact -c 2 tmp.tmp > $newfile
    afiles[$m]=$newfile
    ((m++))
  done
  files=${afiles[@]}
fi

#ShowFiles
[ $verbose = "YES" ] && ShowFiles

######################################################### 

PlotFiles 

######################################################### insert logo

if [ $logo -ne 0 ]; then
  $fembin/gpsinsert -relative "$logo_where" $logo_file out.ps
  mv incl_out.ps out.ps
fi

######################################################### 

#echo "outfile: $outfile"
if [ -n "$outfile" ]; then
  if [ "$outfile" = "-" ]; then
    $ghost out.ps
  elif [ "$outfile" = "out.png" ]; then
    :
  else
    #rename out. $outfile. out.[1-9]*.ps out.ps		# old call
    rename "s/out\./$outfile./" out.[1-9]*.ps out.ps	# use perl expression
  fi
fi

#echo "files to be deleted:"
#echo "$deletefiles"
rm -f $deletefiles

######################################################### end

