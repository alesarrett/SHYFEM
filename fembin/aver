#!/usr/bin/perl
#
# computes average
#
# -m|-move #	use moving average with # values on each side
# -c|-col #	use column # to compute average (column 1 is default)
#			(columns start at 0)
# -f|-fact #	multiply each value with #

# handle options

$move = 0;
$column = 1;
$fact = 1;

for(;;) {
  $arg = $ARGV[0];
  if( $arg eq "-h" or $arg eq "-help" ) {
    Usage();
    exit 1;
  } elsif( $arg eq "-m" or $arg eq "-move" ) {
    shift;
    $move = shift;
  } elsif( $arg eq "-c" or $arg eq "-col" ) {
    shift;
    $column = shift;
  } elsif( $arg eq "-f" or $arg eq "-fact" ) {
    shift;
    $fact = shift;
  } else {
    last;
  }
}

@files = @ARGV;
$nfiles = @files;
#print "total number of files: $nfiles\n";

unless ($nfiles) {
    Usage();
    exit 1;
}

$total = 0;

if( $move ) {
    @new = <>;
    $ra = scale(\@new,$fact);
    $aver = maver($move,$ra);
    print_array($aver);
} elsif( $nfiles < 2 ) {
    @new = <>;
    $ra = scale(\@new,$fact);
    $aver = &aver($ra);
    print "$aver\n";
} else {
    foreach $file (@files) {
	open(FILE,"$file");
	@new = <FILE>;
        $ra = scale(\@new,$fact);
        $aver = &aver($ra);
	$total += $aver;
        print "$file: $aver\n";
	close(FILE);
    }
    my $taver = $total / $nfiles;
    #print "total: $total  $taver\n";
    print "total:  $taver\n";
}

###############################################################

sub Usage
{
    print STDERR "Usage: aver [-h|-help] options file(s)\n";
    print STDERR "  options:\n";
    print STDERR "    -m|-move #  compute moving average on # values on each side\n";
    print STDERR "    -c|-col #   use column # to compute average (default 1)\n";
    print STDERR "    -f|-fact #  scale column with #\n";
}

###############################################################

# this part is not working...

sub maver
{
    my ($move,$ra) = @_;

    my @old = ();
    foreach (@$ra) {
	s/^\s+//;
	my @f = split;
	my $value = $f[$column];
	push(@old,$value);
    }

    my $n = @old;
    my $n1 = $n - 1;

    my @new = ();

    for(my $i=0;$i<$n;$i++) {
      my $low = $i - $move;
      $low = 0 if $low < 0;
      my $high = $i + $move;
      $high = $n1 if $high > $n1;
      my $m = 0;
      my $v = 0;
      for(my $j=low;$j<=$high;$j++) {
	$m++;
	$v += $old[j];
      }
      $v /= $m if $m;
      push(@new,$v);
    }

    return \@new;
}

sub print_array
{
    my ($ra) = @_;

    my $n = @$ra;
    my $n1 = $n - 1;

    my @new = ();

    for(my $i=0;$i<$n;$i++) {
      my $low = $i - $move;
      $low = 0 if $low < 0;
    }
}

###############################################################

sub aver
{
    my $ra = shift;

    my $total = 0;
    my $n = 0;
    my $aver = 0;

    foreach (@$ra) {
	s/^\s+//;
	my @f = split;
	my $value = $f[$column];

	$n++;
	$total += $value;
    }

    $aver = $total / $n if $n;

    return $aver;
}

###############################################################

sub scale
{
    my ($ra,$fact) = @_;

    #return $ra if not defined $fact or $fact == 0 or $fact == 1;

    $fact = 1 if not defined $fact or $fact == 0;

    my @new = ();

    foreach (@$ra) {
	s/^\s+//;
	next if /^\#/;
	my @f = split;
	$f[$column] *= $fact;
	my $line = join(" ",@f);
	push(@new,$line);
    }

    return \@new;
}

###############################################################

